name: Build and Release Chrome Extension

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.4)'
        required: false
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Run Unit Tests
      run: |
        echo "## 🧪 Running Unit Tests" >> $GITHUB_STEP_SUMMARY
        cd chrome-extension/tests
        
        # Run the comprehensive domain tag color tests
        if node run-all-domain-tag-tests.js; then
          echo "✅ All unit tests passed!" >> $GITHUB_STEP_SUMMARY
          echo "Unit tests completed successfully"
        else
          echo "❌ Unit tests failed! Stopping release process." >> $GITHUB_STEP_SUMMARY
          echo "::error::Unit tests failed. Release cannot proceed."
          exit 1
        fi
    
    - name: Calculate new version
      id: new_version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          # Use manual input version
          NEW_VERSION="${{ github.event.inputs.version }}"
          echo "Using manual version: $NEW_VERSION"
        else
          # Auto-increment based on latest git tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}  # Remove 'v' prefix
          
          IFS='.' read -ra VERSION_PARTS <<< "$LATEST_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "Auto-incremented version from $LATEST_VERSION to $NEW_VERSION"
        fi
        
        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
        echo "New tag: v$NEW_VERSION"
    
    - name: Generate production manifest.json
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new }}"
        cd chrome-extension
        
        echo "Original manifest version: $(jq -r '.version' manifest.json)"
        
        # Create production version of manifest.json (no commit to repo)
        jq --arg version "$NEW_VERSION" '.version = $version' manifest.json > manifest.prod.json
        mv manifest.prod.json manifest.json
        
        echo "Generated production manifest.json with version $NEW_VERSION"
        echo "Production manifest version: $(jq -r '.version' manifest.json)"
    
    - name: Create extension package
      run: |
        cd chrome-extension
        zip -r "../third-party-domain-monitor-${{ steps.new_version.outputs.new }}.zip" . \
          -x "*.git*" "*.DS_Store*" "node_modules/*" "*.log"
        cd ..
        echo "Created package: third-party-domain-monitor-${{ steps.new_version.outputs.new }}.zip"
        ls -la *.zip
    
    - name: Create Git tag
      run: |
        git tag ${{ steps.new_version.outputs.tag }}
        git push origin ${{ steps.new_version.outputs.tag }}
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --oneline --pretty=format:"- %s" -10)
        else
          COMMITS=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD)
        fi
        
        # Create release notes
        cat > release_notes.txt << EOF
        ## Changes in this release
        
        $COMMITS
        
        ## Installation
        1. Download the \`third-party-domain-monitor-${{ steps.new_version.outputs.new }}.zip\` file
        2. Extract the ZIP file
        3. Open Chrome and go to \`chrome://extensions/\`
        4. Enable "Developer mode" in the top right
        5. Click "Load unpacked" and select the extracted folder
        
        ## What's New
        This Chrome extension monitors third-party tracking domains and displays them as beautiful animated tags in the bottom-right corner of web pages.
        EOF
        
        echo "Generated release notes"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.new_version.outputs.tag }}
        name: "Release ${{ steps.new_version.outputs.new }}"
        body_path: release_notes.txt
        files: |
          third-party-domain-monitor-${{ steps.new_version.outputs.new }}.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: chrome-extension-${{ steps.new_version.outputs.new }}
        path: third-party-domain-monitor-${{ steps.new_version.outputs.new }}.zip
        retention-days: 90
    
    - name: Build summary
      run: |
        echo "## ✅ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Unit Tests**: ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.new_version.outputs.new }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: ${{ steps.new_version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: third-party-domain-monitor-${{ steps.new_version.outputs.new }}.zip" >> $GITHUB_STEP_SUMMARY
        echo "- **Release**: [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.new_version.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎉 **Release created successfully!** All quality gates passed." >> $GITHUB_STEP_SUMMARY